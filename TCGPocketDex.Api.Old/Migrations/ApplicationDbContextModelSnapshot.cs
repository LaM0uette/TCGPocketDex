// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TCGPocketDex.Api.Old.Data;

#nullable disable

namespace TCGPocketDex.Api.Old.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("preprod")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PokemonAttackPokemonCard", b =>
                {
                    b.Property<int>("AttacksId")
                        .HasColumnType("integer");

                    b.Property<int>("PokemonCardId")
                        .HasColumnType("integer");

                    b.HasKey("AttacksId", "PokemonCardId");

                    b.HasIndex("PokemonCardId");

                    b.ToTable("PokemonAttackPokemonCard", "preprod");
                });

            modelBuilder.Entity("PokemonAttackPokemonType", b =>
                {
                    b.Property<int>("AttacksUsingTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CostsId")
                        .HasColumnType("integer");

                    b.HasKey("AttacksUsingTypeId", "CostsId");

                    b.HasIndex("CostsId");

                    b.ToTable("PokemonAttackCosts", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.Booster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardExtensionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CardExtensionId");

                    b.ToTable("Boosters", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.BoosterTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoosterId")
                        .HasColumnType("integer");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BoosterId", "Culture")
                        .IsUnique();

                    b.ToTable("BoosterTranslations", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoosterId")
                        .HasColumnType("integer");

                    b.Property<int?>("CardExtensionId")
                        .HasColumnType("integer");

                    b.Property<int>("CardRarityId")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtensionCardNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("PromoSeriesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoosterId");

                    b.HasIndex("CardExtensionId");

                    b.HasIndex("CardRarityId");

                    b.HasIndex("PromoSeriesId");

                    b.ToTable("Cards", "preprod", t =>
                        {
                            t.HasCheckConstraint("CK_Cards_Source", "(\"BoosterId\" IS NOT NULL AND \"PromoSeriesId\" IS NULL AND \"CardExtensionId\" IS NOT NULL) OR (\"BoosterId\" IS NULL AND \"PromoSeriesId\" IS NOT NULL AND \"CardExtensionId\" IS NULL)");
                        });

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.CardExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("Series", "Code")
                        .IsUnique();

                    b.ToTable("CardExtensions", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.CardExtensionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardExtensionId")
                        .HasColumnType("integer");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CardExtensionId", "Culture")
                        .IsUnique();

                    b.ToTable("CardExtensionTranslations", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.CardRarity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("CardRarities", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.CardTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CardId", "Culture")
                        .IsUnique();

                    b.ToTable("CardTranslations", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("PokemonAbilities", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonAbilityTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PokemonAbilityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonAbilityId", "Culture")
                        .IsUnique();

                    b.ToTable("PokemonAbilityTranslations", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Damage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PokemonAttacks", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonAttackTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PokemonAttackId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonAttackId", "Culture")
                        .IsUnique();

                    b.ToTable("PokemonAttackTranslations", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("PokemonStages", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonStageTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("PokemonStageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonStageId", "Culture")
                        .IsUnique();

                    b.ToTable("PokemonStageTranslations", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("PokemonTypes", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonTypeTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("PokemonTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonTypeId", "Culture")
                        .IsUnique();

                    b.ToTable("PokemonTypeTranslations", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonWeakness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PokemonCardId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonCardId")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("PokemonWeaknesses", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PromoSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("PromoSeries", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PromoSeriesTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PromoSeriesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PromoSeriesId", "Culture")
                        .IsUnique();

                    b.ToTable("PromoSeriesTranslations", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.FossilCard", b =>
                {
                    b.HasBaseType("TCGPocketDex.Api.Old.Entity.Card");

                    b.Property<int>("Hp")
                        .HasColumnType("integer");

                    b.ToTable("FossilCards", "preprod", t =>
                        {
                            t.HasCheckConstraint("CK_Cards_Source", "(\"BoosterId\" IS NOT NULL AND \"PromoSeriesId\" IS NULL AND \"CardExtensionId\" IS NOT NULL) OR (\"BoosterId\" IS NULL AND \"PromoSeriesId\" IS NOT NULL AND \"CardExtensionId\" IS NULL)");
                        });
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.ItemCard", b =>
                {
                    b.HasBaseType("TCGPocketDex.Api.Old.Entity.Card");

                    b.ToTable("ItemCards", "preprod", t =>
                        {
                            t.HasCheckConstraint("CK_Cards_Source", "(\"BoosterId\" IS NOT NULL AND \"PromoSeriesId\" IS NULL AND \"CardExtensionId\" IS NOT NULL) OR (\"BoosterId\" IS NULL AND \"PromoSeriesId\" IS NOT NULL AND \"CardExtensionId\" IS NULL)");
                        });
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonCard", b =>
                {
                    b.HasBaseType("TCGPocketDex.Api.Old.Entity.Card");

                    b.Property<int>("Hp")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEx")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMega")
                        .HasColumnType("boolean");

                    b.Property<int?>("PokemonAbilityId")
                        .HasColumnType("integer");

                    b.Property<int>("RetreatCost")
                        .HasColumnType("integer");

                    b.Property<int>("StageId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasIndex("PokemonAbilityId");

                    b.HasIndex("StageId");

                    b.HasIndex("TypeId");

                    b.ToTable("PokemonCards", "preprod", t =>
                        {
                            t.HasCheckConstraint("CK_Cards_Source", "(\"BoosterId\" IS NOT NULL AND \"PromoSeriesId\" IS NULL AND \"CardExtensionId\" IS NOT NULL) OR (\"BoosterId\" IS NULL AND \"PromoSeriesId\" IS NOT NULL AND \"CardExtensionId\" IS NULL)");
                        });
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonToolCard", b =>
                {
                    b.HasBaseType("TCGPocketDex.Api.Old.Entity.Card");

                    b.ToTable("PokemonToolCards", "preprod", t =>
                        {
                            t.HasCheckConstraint("CK_Cards_Source", "(\"BoosterId\" IS NOT NULL AND \"PromoSeriesId\" IS NULL AND \"CardExtensionId\" IS NOT NULL) OR (\"BoosterId\" IS NULL AND \"PromoSeriesId\" IS NOT NULL AND \"CardExtensionId\" IS NULL)");
                        });
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.SupporterCard", b =>
                {
                    b.HasBaseType("TCGPocketDex.Api.Old.Entity.Card");

                    b.ToTable("SupporterCards", "preprod", t =>
                        {
                            t.HasCheckConstraint("CK_Cards_Source", "(\"BoosterId\" IS NOT NULL AND \"PromoSeriesId\" IS NULL AND \"CardExtensionId\" IS NOT NULL) OR (\"BoosterId\" IS NULL AND \"PromoSeriesId\" IS NOT NULL AND \"CardExtensionId\" IS NULL)");
                        });
                });

            modelBuilder.Entity("PokemonAttackPokemonCard", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.PokemonAttack", null)
                        .WithMany()
                        .HasForeignKey("AttacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Old.Entity.PokemonCard", null)
                        .WithMany()
                        .HasForeignKey("PokemonCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonAttackPokemonType", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.PokemonAttack", null)
                        .WithMany()
                        .HasForeignKey("AttacksUsingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Old.Entity.PokemonType", null)
                        .WithMany()
                        .HasForeignKey("CostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.Booster", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.CardExtension", "CardExtension")
                        .WithMany()
                        .HasForeignKey("CardExtensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardExtension");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.BoosterTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.Booster", "Booster")
                        .WithMany("Translations")
                        .HasForeignKey("BoosterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booster");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.Card", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.Booster", "Booster")
                        .WithMany("Cards")
                        .HasForeignKey("BoosterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TCGPocketDex.Api.Old.Entity.CardExtension", "Extension")
                        .WithMany("Cards")
                        .HasForeignKey("CardExtensionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TCGPocketDex.Api.Old.Entity.CardRarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("CardRarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Old.Entity.PromoSeries", "PromoSeries")
                        .WithMany("Cards")
                        .HasForeignKey("PromoSeriesId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Booster");

                    b.Navigation("Extension");

                    b.Navigation("PromoSeries");

                    b.Navigation("Rarity");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.CardExtensionTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.CardExtension", "CardExtension")
                        .WithMany("Translations")
                        .HasForeignKey("CardExtensionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardExtension");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.CardTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.Card", "Card")
                        .WithMany("Translations")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonAbilityTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.PokemonAbility", "PokemonAbility")
                        .WithMany("Translations")
                        .HasForeignKey("PokemonAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonAbility");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonAttackTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.PokemonAttack", "PokemonAttack")
                        .WithMany("Translations")
                        .HasForeignKey("PokemonAttackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonAttack");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonStageTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.PokemonStage", "PokemonStage")
                        .WithMany("Translations")
                        .HasForeignKey("PokemonStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonStage");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonTypeTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.PokemonType", "PokemonType")
                        .WithMany("Translations")
                        .HasForeignKey("PokemonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonType");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonWeakness", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.PokemonCard", "Pokemon")
                        .WithOne("Weakness")
                        .HasForeignKey("TCGPocketDex.Api.Old.Entity.PokemonWeakness", "PokemonCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Old.Entity.PokemonType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemon");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PromoSeriesTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.PromoSeries", "PromoSeries")
                        .WithMany("Translations")
                        .HasForeignKey("PromoSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromoSeries");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.FossilCard", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.Card", null)
                        .WithOne()
                        .HasForeignKey("TCGPocketDex.Api.Old.Entity.FossilCard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.ItemCard", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.Card", null)
                        .WithOne()
                        .HasForeignKey("TCGPocketDex.Api.Old.Entity.ItemCard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonCard", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.Card", null)
                        .WithOne()
                        .HasForeignKey("TCGPocketDex.Api.Old.Entity.PokemonCard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Old.Entity.PokemonAbility", "Ability")
                        .WithMany()
                        .HasForeignKey("PokemonAbilityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TCGPocketDex.Api.Old.Entity.PokemonStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Old.Entity.PokemonType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Stage");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonToolCard", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.Card", null)
                        .WithOne()
                        .HasForeignKey("TCGPocketDex.Api.Old.Entity.PokemonToolCard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.SupporterCard", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Old.Entity.Card", null)
                        .WithOne()
                        .HasForeignKey("TCGPocketDex.Api.Old.Entity.SupporterCard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.Booster", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.Card", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.CardExtension", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonAbility", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonAttack", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonStage", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonType", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PromoSeries", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Old.Entity.PokemonCard", b =>
                {
                    b.Navigation("Weakness");
                });
#pragma warning restore 612, 618
        }
    }
}
