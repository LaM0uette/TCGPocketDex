// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TCGPocketDex.Api.Data;

#nullable disable

namespace TCGPocketDex.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251002013924_AddCardSpecials")]
    partial class AddCardSpecials
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("preprod")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PokemonAttackCost", b =>
                {
                    b.Property<int>("PokemonAttackId")
                        .HasColumnType("integer");

                    b.Property<int>("PokemonTypeId")
                        .HasColumnType("integer");

                    b.HasKey("PokemonAttackId", "PokemonTypeId");

                    b.HasIndex("PokemonTypeId");

                    b.ToTable("PokemonAttackCosts", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardRarityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CardSetId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SerieNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Specials")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CardRarityId");

                    b.HasIndex("CardSetId");

                    b.ToTable("Cards", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardFossil", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("Hp")
                        .HasColumnType("integer");

                    b.HasKey("CardId");

                    b.ToTable("CardFossils", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardItem", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.HasKey("CardId");

                    b.ToTable("CardItems", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardPokemon", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("Hp")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonAbilityId")
                        .HasColumnType("integer");

                    b.Property<int>("RetreatCost")
                        .HasColumnType("integer");

                    b.Property<int>("Specials")
                        .HasColumnType("integer");

                    b.Property<int>("Stage")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("WeaknessTypeId")
                        .HasColumnType("integer");

                    b.HasKey("CardId");

                    b.HasIndex("PokemonAbilityId");

                    b.HasIndex("TypeId");

                    b.HasIndex("WeaknessTypeId");

                    b.ToTable("CardPokemons", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardRarity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("CardRarities", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("CardSets", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardSetTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardSetId")
                        .HasColumnType("integer");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CardSetId");

                    b.ToTable("CardSetTranslations", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardSupporter", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.HasKey("CardId");

                    b.ToTable("CardSupporters", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardTool", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.HasKey("CardId");

                    b.ToTable("CardTools", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("CardTranslations", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.PokemonAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("PokemonAbilities", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.PokemonAbilityTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PokemonAbilityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonAbilityId");

                    b.ToTable("PokemonAbilityTranslations", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.PokemonAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CardPokemonCardId")
                        .HasColumnType("integer");

                    b.Property<int>("Damage")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CardPokemonCardId");

                    b.ToTable("PokemonAttacks", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.PokemonAttackTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PokemonAttackId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonAttackId");

                    b.ToTable("PokemonAttackTranslations", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.PokemonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("PokemonTypes", "preprod");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.PokemonTypeTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("PokemonTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonTypeId");

                    b.ToTable("PokemonTypeTranslations", "preprod");
                });

            modelBuilder.Entity("PokemonAttackCost", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entity.PokemonAttack", null)
                        .WithMany()
                        .HasForeignKey("PokemonAttackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Entity.PokemonType", null)
                        .WithMany()
                        .HasForeignKey("PokemonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.Card", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entity.CardRarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("CardRarityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Entity.CardSet", "CardSet")
                        .WithMany("Cards")
                        .HasForeignKey("CardSetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CardSet");

                    b.Navigation("Rarity");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardFossil", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entity.Card", "Card")
                        .WithOne("Fossil")
                        .HasForeignKey("TCGPocketDex.Api.Entity.CardFossil", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardItem", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entity.Card", "Card")
                        .WithOne("Item")
                        .HasForeignKey("TCGPocketDex.Api.Entity.CardItem", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardPokemon", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entity.Card", "Card")
                        .WithOne("Pokemon")
                        .HasForeignKey("TCGPocketDex.Api.Entity.CardPokemon", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Entity.PokemonAbility", "Ability")
                        .WithMany()
                        .HasForeignKey("PokemonAbilityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TCGPocketDex.Api.Entity.PokemonType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Entity.PokemonType", "Weakness")
                        .WithMany()
                        .HasForeignKey("WeaknessTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Ability");

                    b.Navigation("Card");

                    b.Navigation("Type");

                    b.Navigation("Weakness");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardSetTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entity.CardSet", "CardSet")
                        .WithMany("Translations")
                        .HasForeignKey("CardSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardSet");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardSupporter", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entity.Card", "Card")
                        .WithOne("Supporter")
                        .HasForeignKey("TCGPocketDex.Api.Entity.CardSupporter", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardTool", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entity.Card", "Card")
                        .WithOne("Tool")
                        .HasForeignKey("TCGPocketDex.Api.Entity.CardTool", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entity.Card", "Card")
                        .WithMany("Translations")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.PokemonAbilityTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entity.PokemonAbility", "PokemonAbility")
                        .WithMany("Translations")
                        .HasForeignKey("PokemonAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonAbility");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.PokemonAttack", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entity.CardPokemon", null)
                        .WithMany("Attacks")
                        .HasForeignKey("CardPokemonCardId");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.PokemonAttackTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entity.PokemonAttack", "PokemonAttack")
                        .WithMany("Translations")
                        .HasForeignKey("PokemonAttackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonAttack");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.PokemonTypeTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entity.PokemonType", "PokemonType")
                        .WithMany("Translations")
                        .HasForeignKey("PokemonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonType");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.Card", b =>
                {
                    b.Navigation("Fossil");

                    b.Navigation("Item");

                    b.Navigation("Pokemon");

                    b.Navigation("Supporter");

                    b.Navigation("Tool");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardPokemon", b =>
                {
                    b.Navigation("Attacks");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.CardSet", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.PokemonAbility", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.PokemonAttack", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entity.PokemonType", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
