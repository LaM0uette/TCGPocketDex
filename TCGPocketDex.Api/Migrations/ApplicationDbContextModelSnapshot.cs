// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TCGPocketDex.Api.Data;

#nullable disable

namespace TCGPocketDex.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CardCardSpecial", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("CardSpecialId")
                        .HasColumnType("integer");

                    b.HasKey("CardId", "CardSpecialId");

                    b.HasIndex("CardSpecialId");

                    b.ToTable("CardCardSpecials", "data");
                });

            modelBuilder.Entity("CardPokemonPokemonSpecial", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("PokemonSpecialId")
                        .HasColumnType("integer");

                    b.HasKey("CardId", "PokemonSpecialId");

                    b.HasIndex("PokemonSpecialId");

                    b.ToTable("CardPokemonPokemonSpecials", "data");
                });

            modelBuilder.Entity("PokemonAttackCost", b =>
                {
                    b.Property<int>("PokemonAttackId")
                        .HasColumnType("integer");

                    b.Property<int>("PokemonTypeId")
                        .HasColumnType("integer");

                    b.HasKey("PokemonAttackId", "PokemonTypeId");

                    b.HasIndex("PokemonTypeId");

                    b.ToTable("PokemonAttackCosts", "data");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardCollectionId")
                        .HasColumnType("integer");

                    b.Property<int>("CardRarityId")
                        .HasColumnType("integer");

                    b.Property<int>("CardTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CollectionNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CardCollectionId");

                    b.HasIndex("CardRarityId");

                    b.HasIndex("CardTypeId");

                    b.ToTable("Card", "data");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("CardCollection", "data");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardCollectionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardCollectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CardCollectionId");

                    b.ToTable("CardCollectionTranslation", "translation");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardFossil", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("Hp")
                        .HasColumnType("integer");

                    b.HasKey("CardId");

                    b.ToTable("CardFossil", "data");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardItem", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.HasKey("CardId");

                    b.ToTable("CardItem", "data");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardPokemon", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<int>("Hp")
                        .HasColumnType("integer");

                    b.Property<int?>("PokemonAbilityId")
                        .HasColumnType("integer");

                    b.Property<int>("PokemonStageId")
                        .HasColumnType("integer");

                    b.Property<int>("PokemonTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RetreatCost")
                        .HasColumnType("integer");

                    b.Property<int?>("WeaknessPokemonTypeId")
                        .HasColumnType("integer");

                    b.HasKey("CardId");

                    b.HasIndex("PokemonAbilityId");

                    b.HasIndex("PokemonStageId");

                    b.HasIndex("PokemonTypeId");

                    b.HasIndex("WeaknessPokemonTypeId");

                    b.ToTable("CardPokemon", "data");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardRarity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("CardRarity", "ref");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardRarityTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardRarityId")
                        .HasColumnType("integer");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CardRarityId");

                    b.ToTable("CardRarityTranslation", "translation");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardSpecial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CardSpecial", "ref");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardSpecialTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardSpecialId")
                        .HasColumnType("integer");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CardSpecialId");

                    b.ToTable("CardSpecialTranslation", "translation");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardSupporter", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.HasKey("CardId");

                    b.ToTable("CardSupporter", "data");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardTool", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.HasKey("CardId");

                    b.ToTable("CardTool", "data");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("CardTranslation", "translation");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CardType", "ref");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardTypeTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CardTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("CardTypeId");

                    b.ToTable("CardTypeTranslation", "translation");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("PokemonAbility", "data");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonAbilityTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PokemonAbilityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonAbilityId");

                    b.ToTable("PokemonAbilityTranslation", "translation");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonAttack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CardPokemonCardId")
                        .HasColumnType("integer");

                    b.Property<int>("Damage")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CardPokemonCardId");

                    b.ToTable("PokemonAttack", "data");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonAttackTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PokemonAttackId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonAttackId");

                    b.ToTable("PokemonAttackTranslation", "translation");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonSpecial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PokemonSpecial", "ref");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonSpecialTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("PokemonSpecialId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonSpecialId");

                    b.ToTable("PokemonSpecialTranslation", "translation");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("PokemonStage", "ref");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonStageTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("PokemonStageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonStageId");

                    b.ToTable("PokemonStageTranslation", "translation");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("PokemonType", "ref");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonTypeTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("PokemonTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PokemonTypeId");

                    b.ToTable("PokemonTypeTranslation", "translation");
                });

            modelBuilder.Entity("CardCardSpecial", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.Card", null)
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Entities.CardSpecial", null)
                        .WithMany()
                        .HasForeignKey("CardSpecialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CardPokemonPokemonSpecial", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.CardPokemon", null)
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Entities.PokemonSpecial", null)
                        .WithMany()
                        .HasForeignKey("PokemonSpecialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonAttackCost", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.PokemonAttack", null)
                        .WithMany()
                        .HasForeignKey("PokemonAttackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Entities.PokemonType", null)
                        .WithMany()
                        .HasForeignKey("PokemonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.Card", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.CardCollection", "Collection")
                        .WithMany("Cards")
                        .HasForeignKey("CardCollectionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Entities.CardRarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("CardRarityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Entities.CardType", "Type")
                        .WithMany()
                        .HasForeignKey("CardTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Rarity");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardCollectionTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.CardCollection", "Collection")
                        .WithMany("Translations")
                        .HasForeignKey("CardCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardFossil", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.Card", "Card")
                        .WithOne("Fossil")
                        .HasForeignKey("TCGPocketDex.Api.Entities.CardFossil", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardItem", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.Card", "Card")
                        .WithOne("Item")
                        .HasForeignKey("TCGPocketDex.Api.Entities.CardItem", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardPokemon", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.Card", "Card")
                        .WithOne("Pokemon")
                        .HasForeignKey("TCGPocketDex.Api.Entities.CardPokemon", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Entities.PokemonAbility", "Ability")
                        .WithMany()
                        .HasForeignKey("PokemonAbilityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TCGPocketDex.Api.Entities.PokemonStage", "Stage")
                        .WithMany()
                        .HasForeignKey("PokemonStageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Entities.PokemonType", "Type")
                        .WithMany()
                        .HasForeignKey("PokemonTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TCGPocketDex.Api.Entities.PokemonType", "Weakness")
                        .WithMany()
                        .HasForeignKey("WeaknessPokemonTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Ability");

                    b.Navigation("Card");

                    b.Navigation("Stage");

                    b.Navigation("Type");

                    b.Navigation("Weakness");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardRarityTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.CardRarity", "CardRarity")
                        .WithMany("Translations")
                        .HasForeignKey("CardRarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardRarity");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardSpecialTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.CardSpecial", "CardSpecial")
                        .WithMany("Translations")
                        .HasForeignKey("CardSpecialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardSpecial");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardSupporter", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.Card", "Card")
                        .WithOne("Supporter")
                        .HasForeignKey("TCGPocketDex.Api.Entities.CardSupporter", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardTool", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.Card", "Card")
                        .WithOne("Tool")
                        .HasForeignKey("TCGPocketDex.Api.Entities.CardTool", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.Card", "Card")
                        .WithMany("Translations")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardTypeTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.CardType", "CardType")
                        .WithMany("Translations")
                        .HasForeignKey("CardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardType");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonAbilityTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.PokemonAbility", "PokemonAbility")
                        .WithMany("Translations")
                        .HasForeignKey("PokemonAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonAbility");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonAttack", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.CardPokemon", null)
                        .WithMany("Attacks")
                        .HasForeignKey("CardPokemonCardId");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonAttackTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.PokemonAttack", "PokemonAttack")
                        .WithMany("Translations")
                        .HasForeignKey("PokemonAttackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonAttack");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonSpecialTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.PokemonSpecial", "PokemonSpecial")
                        .WithMany("Translations")
                        .HasForeignKey("PokemonSpecialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonSpecial");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonStageTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.PokemonStage", "PokemonStage")
                        .WithMany("Translations")
                        .HasForeignKey("PokemonStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonStage");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonTypeTranslation", b =>
                {
                    b.HasOne("TCGPocketDex.Api.Entities.PokemonType", "PokemonType")
                        .WithMany("Translations")
                        .HasForeignKey("PokemonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PokemonType");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.Card", b =>
                {
                    b.Navigation("Fossil");

                    b.Navigation("Item");

                    b.Navigation("Pokemon");

                    b.Navigation("Supporter");

                    b.Navigation("Tool");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardCollection", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardPokemon", b =>
                {
                    b.Navigation("Attacks");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardRarity", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardSpecial", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.CardType", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonAbility", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonAttack", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonSpecial", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonStage", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("TCGPocketDex.Api.Entities.PokemonType", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
