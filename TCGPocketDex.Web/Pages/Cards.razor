@page "/cards"
@using TCGPocketDex.SDK.Cards
@using TCGPocketDex.SDK.References
@using TCGPocketDex.Contracts.Cards
@using TCGPocketDex.Contracts.References
@inject ICardsClient CardsClient
@inject ITypesClient TypesClient
@inject IStagesClient StagesClient
@inject IAbilitiesClient AbilitiesClient
@inject IAttacksClient AttacksClient
@inject ICardExtensionsClient CardExtensionsClient
@inject IBoostersClient BoostersClient
@inject IRaritiesClient RaritiesClient
@inject IPromoSeriesClient PromoSeriesClient

<h1>Cards</h1>

<div>
    <label>Culture: <input @bind="culture" /></label>
    <button @onclick="Load">Load</button>
</div>

@if (cards is null)
{
    <p>Loading...</p>
}
else if (cards.Count == 0)
{
    <p>No cards.</p>
}
else
{
    <ul>
        @foreach (var c in cards)
        {
            <li>@c.Id - @c.Name (@c.Kind) [Rarity: @c.CardRarityName]</li>
        }
    </ul>
}

<hr />
<button @onclick="ToggleNew">@((showNew ? "Cancel" : "New"))</button>
@if (showNew)
{
    <EditForm Model="edit" OnValidSubmit="Create">
        <DataAnnotationsValidator />
        <div>
            <label>Culture: <input @bind="edit.Culture" /></label>
        </div>
        <div>
            <label>Name: <input @bind="edit.Name" /></label>
        </div>
        <div>
            <label>ImageUrl: <input @bind="edit.ImageUrl" /></label>
        </div>
        <div>
            <label>Rarity:
                <select @bind="edit.CardRarityId">
                    <option value="">-- select --</option>
                    @foreach (var r in rarities)
                    {
                        <option value="@r.Id">@r.Name</option>
                    }
                </select>
                <button type="button" @onclick="ToggleNewRarity">@((showNewRarity ? "Cancel" : "New Rarity"))</button>
            </label>
        </div>
        @if (showNewRarity)
        {
            <div>
                <label>Name: <input @bind="newRarityName" /></label>
                <label>ImageUrl: <input @bind="newRarityImageUrl" /></label>
                <button type="button" @onclick="CreateRarity">Create Rarity</button>
            </div>
        }
        <div>
            <label>Kind:
                <select @bind="edit.Kind">
                    @foreach (var k in Enum.GetValues<CardKind>())
                    {
                        <option value="@k">@k</option>
                    }
                </select>
            </label>
        </div>
        <fieldset>
            <legend>Origin</legend>
            <label><input type="radio" name="origin" value="booster" @onchange="_ => SetOrigin(true)" checked="@useBooster" /> Booster</label>
            <label><input type="radio" name="origin" value="promo" @onchange="_ => SetOrigin(false)" checked="@(!useBooster)" /> Promo</label>
            @if (useBooster)
            {
                <div>
                    <label>Extension:
                        <select @bind="edit.CardExtensionId" @bind:after="OnExtensionChanged">
                            <option value="">-- select --</option>
                            @foreach (var e in extensions)
                            {
                                <option value="@e.Id">@e.Series - @e.Code - @e.Name</option>
                            }
                        </select>
                        <button type="button" @onclick="ToggleNewExtension">@((showNewExtension ? "Cancel" : "New Extension"))</button>
                    </label>
                </div>
                @if (showNewExtension)
                {
                    <div>
                        <label>Series: <input @bind="newExtensionSeries" /></label>
                        <label>Code: <input @bind="newExtensionCode" /></label>
                        <label>Name: <input @bind="newExtensionName" /></label>
                        <button type="button" @onclick="CreateExtension">Create Extension</button>
                    </div>
                }
                <div>
                    <label>Booster:
                        <select @bind="edit.BoosterId">
                            <option value="">-- select --</option>
                            @foreach (var b in boosters)
                            {
                                <option value="@b.Id">@b.Name</option>
                            }
                        </select>
                        <button type="button" @onclick="ToggleNewBooster">@((showNewBooster ? "Cancel" : "New Booster"))</button>
                    </label>
                </div>
                @if (showNewBooster)
                {
                    <div>
                        <label>New Booster Name: <input @bind="newBoosterName" /></label>
                        <button type="button" @onclick="CreateBooster" disabled="@(!edit.CardExtensionId.HasValue)">Create Booster</button>
                    </div>
                }
            }
            else
            {
                <div>
                    <label>Promo Series:
                        <select @bind="edit.PromoSeriesId">
                            <option value="">-- select --</option>
                            @foreach (var p in promoSeries)
                            {
                                <option value="@p.Id">@p.Code - @p.Name</option>
                            }
                        </select>
                        <button type="button" @onclick="ToggleNewPromoSeries">@((showNewPromoSeries ? "Cancel" : "New Promo Series"))</button>
                    </label>
                </div>
                @if (showNewPromoSeries)
                {
                    <div>
                        <label>Code: <input @bind="newPromoSeriesCode" /></label>
                        <label>Name: <input @bind="newPromoSeriesName" /></label>
                        <button type="button" @onclick="CreatePromoSeries">Create Promo Series</button>
                    </div>
                }
            }
        </fieldset>

        @if (edit.Kind == CardKind.Fossil)
        {
            <div>
                <label>Fossil HP: <input type="number" @bind="edit.FossilHp" /></label>
            </div>
        }
        else if (edit.Kind == CardKind.Pokemon)
        {
            <div>
                <label>Is EX: <input type="checkbox" @bind="edit.PokemonIsEx" /></label>
            </div>
            <div>
                <label>Is Mega: <input type="checkbox" @bind="edit.PokemonIsMega" /></label>
            </div>
            <div>
                <label>Stage:
                    <select @bind="edit.PokemonStageId">
                        <option value="">-- select --</option>
                        @foreach (var s in stages)
                        {
                            <option value="@s.Id">@s.Name</option>
                        }
                    </select>
                    <button type="button" @onclick="ToggleNewStage">@((showNewStage ? "Cancel" : "New Stage"))</button>
                </label>
            </div>
            @if (showNewStage)
            {
                <div>
                    <label>New Stage Name: <input @bind="newStageName" /></label>
                    <button type="button" @onclick="CreateStage">Create Stage</button>
                </div>
            }
            <div>
                <label>HP: <input type="number" @bind="edit.PokemonHp" /></label>
            </div>
            <div>
                <label>Type:
                    <select @bind="edit.PokemonTypeId">
                        <option value="">-- select --</option>
                        @foreach (var t in types)
                        {
                            <option value="@t.Id">@t.Name</option>
                        }
                    </select>
                    <button type="button" @onclick="ToggleNewType">@((showNewType ? "Cancel" : "New Type"))</button>
                </label>
            </div>
            @if (showNewType)
            {
                <div>
                    <label>New Type Name: <input @bind="newTypeName" /></label>
                    <label>ImageUrl: <input @bind="newTypeImageUrl" /></label>
                    <button type="button" @onclick="CreateType">Create Type</button>
                </div>
            }
            <div>
                <label>Weakness:
                    <select @bind="edit.PokemonWeaknessTypeId">
                        <option value="">-- none --</option>
                        @foreach (var t in types)
                        {
                            <option value="@t.Id">@t.Name</option>
                        }
                    </select>
                </label>
            </div>
            <div>
                <label>Retreat Cost: <input type="number" @bind="edit.PokemonRetreatCost" /></label>
            </div>
            <div>
                <label>Ability:
                    <select @bind="edit.PokemonAbilityId">
                        <option value="">-- none --</option>
                        @foreach (var a in abilities)
                        {
                            <option value="@a.Id">@a.Name</option>
                        }
                    </select>
                    <button type="button" @onclick="ToggleNewAbility">@((showNewAbility ? "Cancel" : "New Ability"))</button>
                </label>
            </div>
            @if (showNewAbility)
            {
                <div>
                    <label>Name: <input @bind="newAbilityName" /></label>
                    <button type="button" @onclick="CreateAbility">Create Ability</button>
                </div>
            }
            <div>
                <label>Add Attack:
                    <select @bind="selectedAttackToAdd">
                        <option value="">-- select --</option>
                        @foreach (var a in attacks)
                        {
                            <option value="@a.Id">@a.Name (@a.Damage)</option>
                        }
                    </select>
                    <button type="button" @onclick="AddSelectedAttack" disabled="@(!selectedAttackToAdd.HasValue)">Add</button>
                </label>
            </div>
            <div>
                <strong>Selected Attacks:</strong>
                <ul>
                    @foreach (var id in selectedAttackIds)
                    {
                        var a = attacks.FirstOrDefault(x => x.Id == id);
                        <li>@a?.Name (@a?.Damage) <button type="button" @onclick="() => RemoveAttack(id)">Remove</button></li>
                    }
                </ul>
                <button type="button" @onclick="ToggleNewAttack">@((showNewAttack ? "Cancel" : "New Attack"))</button>
            </div>
            @if (showNewAttack)
            {
                <div>
                    <label>Name: <input @bind="newAttackName" /></label>
                    <label>Damage: <input type="number" @bind="newAttackDamage" /></label>
                    <label>Description: <input @bind="newAttackDescription" /></label>
                    <div>
                        <span>Cost Types:</span>
                        @foreach (var t in types)
                        {
                            <label><input type="checkbox" checked="@newAttackCostTypeIds.Contains(t.Id)" @onchange="(ChangeEventArgs e) => ToggleAttackCostType(t.Id, e)" /> @t.Name</label>
                        }
                    </div>
                    <button type="button" @onclick="CreateAttack">Create Attack</button>
                </div>
            }
        }

        <button type="submit">Create</button>
    </EditForm>
}

@code {
    private string culture = "fr";
    private List<CardOutputDTO> cards = new();
    private bool showNew = false;
    private bool useBooster = true;
    private string? attackIdsRaw;

    private List<PokemonTypeOutputDTO> types = new();
    private List<PokemonStageOutputDTO> stages = new();

    private List<CardRarityOutputDTO> rarities = new();
    private List<CardExtensionOutputDTO> extensions = new();
    private List<BoosterOutputDTO> boosters = new();
    private List<PokemonAbilityOutputDTO> abilities = new();
    private List<PokemonAttackOutputDTO> attacks = new();
    private List<PromoSeriesOutputDTO> promoSeries = new();

    private bool showNewType = false;
    private bool showNewStage = false;

    private bool showNewRarity = false;
    private bool showNewExtension = false;
    private bool showNewBooster = false;
    private bool showNewAbility = false;
    private bool showNewAttack = false;
    private bool showNewPromoSeries = false;

    private string? newTypeName;
    private string? newTypeImageUrl;
    private string? newStageName;

    private string? newRarityName;
    private string? newRarityImageUrl;

    private string? newExtensionSeries;
    private string? newExtensionCode;
    private string? newExtensionName;

    private string? newBoosterName;

    private string? newAbilityName;

    private string? newPromoSeriesCode;
    private string? newPromoSeriesName;

    private string? newAttackName;
    private string? newAttackDescription;
    private int newAttackDamage;
    private HashSet<int> newAttackCostTypeIds = new();

    private HashSet<int> selectedAttackIds = new();
    private int? selectedAttackToAdd;

    private NewCardModel edit = new()
    {
        Culture = "fr",
        CardRarityId = 1,
        Kind = CardKind.Item
    };

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        types = (await TypesClient.GetAllAsync(culture)).ToList();
        stages = (await StagesClient.GetAllAsync(culture)).ToList();
        rarities = (await RaritiesClient.GetAllAsync()).ToList();
        extensions = (await CardExtensionsClient.GetAllAsync(culture)).ToList();
        abilities = (await AbilitiesClient.GetAllAsync(culture)).ToList();
        attacks = (await AttacksClient.GetAllAsync(culture)).ToList();
        promoSeries = (await PromoSeriesClient.GetAllAsync(culture)).ToList();
        await LoadBoostersForSelectedExtension();
        cards = (await CardsClient.GetAllAsync(culture)).ToList();
        StateHasChanged();
    }

    private void ToggleNew()
    {
        showNew = !showNew;
    }

    private void SetOrigin(bool booster)
    {
        useBooster = booster;
        if (booster)
        {
            edit.PromoSeriesId = null;
        }
        else
        {
            edit.BoosterId = null;
            edit.CardExtensionId = null;
        }
    }

    private void ParseAttacks()
    {
        if (string.IsNullOrWhiteSpace(attackIdsRaw))
        {
            edit.PokemonAttackIds = null;
            return;
        }
        var ids = attackIdsRaw.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .Select(s => int.TryParse(s, out var v) ? v : (int?)null)
            .Where(v => v.HasValue)
            .Select(v => v!.Value)
            .ToList();
        edit.PokemonAttackIds = ids;
    }

    private void ToggleNewType() => showNewType = !showNewType;
    private void ToggleNewStage() => showNewStage = !showNewStage;

    private async Task CreateType()
    {
        if (string.IsNullOrWhiteSpace(newTypeName) || string.IsNullOrWhiteSpace(newTypeImageUrl)) return;
        var dto = new PokemonTypeInputDTO(culture, newTypeName, newTypeImageUrl);
        var created = await TypesClient.CreateAsync(dto);
        if (created != null)
        {
            types.Add(created);
            edit.PokemonTypeId = created.Id;
            if (!edit.PokemonWeaknessTypeId.HasValue) edit.PokemonWeaknessTypeId = created.Id;
            showNewType = false;
            newTypeName = null;
            newTypeImageUrl = null;
            StateHasChanged();
        }
    }

    private async Task CreateStage()
    {
        if (string.IsNullOrWhiteSpace(newStageName)) return;
        var dto = new PokemonStageInputDTO(culture, newStageName);
        var created = await StagesClient.CreateAsync(dto);
        if (created != null)
        {
            stages.Add(created);
            edit.PokemonStageId = created.Id;
            showNewStage = false;
            newStageName = null;
            StateHasChanged();
        }
    }

    private void ToggleNewRarity() => showNewRarity = !showNewRarity;
    private void ToggleNewExtension() => showNewExtension = !showNewExtension;
    private void ToggleNewBooster() => showNewBooster = !showNewBooster;
    private void ToggleNewAbility() => showNewAbility = !showNewAbility;
    private void ToggleNewAttack() => showNewAttack = !showNewAttack;
    private void ToggleNewPromoSeries() => showNewPromoSeries = !showNewPromoSeries;

    private async Task CreateRarity()
    {
        if (string.IsNullOrWhiteSpace(newRarityName) || string.IsNullOrWhiteSpace(newRarityImageUrl)) return;
        var dto = new CardRarityInputDTO(newRarityName, newRarityImageUrl);
        var created = await RaritiesClient.CreateAsync(dto);
        if (created != null)
        {
            rarities.Add(created);
            edit.CardRarityId = created.Id;
            showNewRarity = false;
            newRarityName = null;
            newRarityImageUrl = null;
            StateHasChanged();
        }
    }

    private async Task OnExtensionChanged()
    {
        await LoadBoostersForSelectedExtension();
    }

    private async Task LoadBoostersForSelectedExtension()
    {
        if (edit.CardExtensionId.HasValue)
        {
            boosters = (await BoostersClient.GetAllAsync(culture, edit.CardExtensionId.Value)).ToList();
            if (!edit.BoosterId.HasValue || !boosters.Any(b => b.Id == edit.BoosterId.Value)) edit.BoosterId = null;
        }
        else
        {
            boosters = new List<BoosterOutputDTO>();
            edit.BoosterId = null;
        }
    }

    private async Task CreateExtension()
    {
        if (string.IsNullOrWhiteSpace(newExtensionSeries) || string.IsNullOrWhiteSpace(newExtensionCode) || string.IsNullOrWhiteSpace(newExtensionName)) return;
        var dto = new CardExtensionInputDTO(newExtensionSeries, newExtensionCode, culture, newExtensionName);
        var created = await CardExtensionsClient.CreateAsync(dto);
        if (created != null)
        {
            extensions.Add(created);
            edit.CardExtensionId = created.Id;
            showNewExtension = false;
            newExtensionSeries = null;
            newExtensionCode = null;
            newExtensionName = null;
            await LoadBoostersForSelectedExtension();
            StateHasChanged();
        }
    }

    private async Task CreateBooster()
    {
        if (!edit.CardExtensionId.HasValue || string.IsNullOrWhiteSpace(newBoosterName)) return;
        var dto = new BoosterInputDTO(edit.CardExtensionId.Value, culture, newBoosterName);
        var created = await BoostersClient.CreateAsync(dto);
        if (created != null)
        {
            boosters.Add(created);
            edit.BoosterId = created.Id;
            showNewBooster = false;
            newBoosterName = null;
            StateHasChanged();
        }
    }

    private async Task CreateAbility()
    {
        if (string.IsNullOrWhiteSpace(newAbilityName)) return;
        var dto = new PokemonAbilityInputDTO(culture, newAbilityName);
        var created = await AbilitiesClient.CreateAsync(dto);
        if (created != null)
        {
            abilities.Add(created);
            edit.PokemonAbilityId = created.Id;
            showNewAbility = false;
            newAbilityName = null;
            StateHasChanged();
        }
    }

    private async Task CreatePromoSeries()
    {
        if (string.IsNullOrWhiteSpace(newPromoSeriesCode) || string.IsNullOrWhiteSpace(newPromoSeriesName)) return;
        var dto = new PromoSeriesInputDTO(newPromoSeriesCode!, culture, newPromoSeriesName!);
        var created = await PromoSeriesClient.CreateAsync(dto);
        if (created != null)
        {
            promoSeries.Add(created);
            edit.PromoSeriesId = created.Id;
            showNewPromoSeries = false;
            newPromoSeriesCode = null;
            newPromoSeriesName = null;
            StateHasChanged();
        }
    }

    private async Task CreateAttack()
    {
        if (string.IsNullOrWhiteSpace(newAttackName)) return;
        var dto = new PokemonAttackInputDTO(culture, newAttackName, newAttackDescription, newAttackDamage, newAttackCostTypeIds.ToList());
        var created = await AttacksClient.CreateAsync(dto);
        if (created != null)
        {
            attacks.Add(created);
            selectedAttackIds.Add(created.Id);
            showNewAttack = false;
            newAttackName = null;
            newAttackDescription = null;
            newAttackDamage = 0;
            newAttackCostTypeIds.Clear();
            StateHasChanged();
        }
    }

    private void AddSelectedAttack()
    {
        if (selectedAttackToAdd.HasValue)
        {
            selectedAttackIds.Add(selectedAttackToAdd.Value);
            selectedAttackToAdd = null;
        }
    }

    private void RemoveAttack(int id)
    {
        if (selectedAttackIds.Contains(id)) selectedAttackIds.Remove(id);
    }

    private void ToggleAttackCostType(int typeId, ChangeEventArgs e)
    {
        var isChecked = e.Value is bool b && b;
        if (isChecked) newAttackCostTypeIds.Add(typeId);
        else newAttackCostTypeIds.Remove(typeId);
    }

    private async Task Create()
    {
        try
        {
            if (useBooster)
            {
                if (!edit.BoosterId.HasValue || !edit.CardExtensionId.HasValue)
                {
                    return;
                }
                edit.PromoSeriesId = null;
            }
            else
            {
                if (!edit.PromoSeriesId.HasValue)
                {
                    return;
                }
                edit.BoosterId = null;
                edit.CardExtensionId = null;
            }

            edit.PokemonAttackIds = selectedAttackIds.Count > 0 ? selectedAttackIds.ToList() : null;
            var dto = new CardInputDTO(
                Culture: edit.Culture ?? "fr",
                Name: edit.Name ?? string.Empty,
                Description: edit.Description,
                ImageUrl: edit.ImageUrl ?? string.Empty,
                CardRarityId: edit.CardRarityId,
                BoosterId: edit.BoosterId,
                CardExtensionId: edit.CardExtensionId,
                PromoSeriesId: edit.PromoSeriesId,
                Kind: edit.Kind,
                FossilHp: edit.FossilHp,
                PokemonIsEx: edit.PokemonIsEx,
                PokemonIsMega: edit.PokemonIsMega,
                PokemonStageId: edit.PokemonStageId,
                PokemonHp: edit.PokemonHp,
                PokemonTypeId: edit.PokemonTypeId,
                PokemonWeaknessTypeId: edit.PokemonWeaknessTypeId,
                PokemonRetreatCost: edit.PokemonRetreatCost,
                PokemonAbilityId: edit.PokemonAbilityId,
                PokemonAttackIds: edit.PokemonAttackIds
            );

            var created = await CardsClient.CreateAsync(dto);
            showNew = false;
            var cultureTemp = edit.Culture;
            edit = new NewCardModel
            {
                Culture = cultureTemp,
                CardRarityId = 1,
                Kind = CardKind.Item
            };
            await Load();
        }
        catch (Exception)
        {
        }
    }

    private class NewCardModel
    {
        public string? Culture { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? ImageUrl { get; set; }
        public int CardRarityId { get; set; }
        public int? BoosterId { get; set; }
        public int? CardExtensionId { get; set; }
        public int? PromoSeriesId { get; set; }
        public CardKind Kind { get; set; }
        public int? FossilHp { get; set; }
        public bool? PokemonIsEx { get; set; }
        public bool? PokemonIsMega { get; set; }
        public int? PokemonStageId { get; set; }
        public int? PokemonHp { get; set; }
        public int? PokemonTypeId { get; set; }
        public int? PokemonWeaknessTypeId { get; set; }
        public int? PokemonRetreatCost { get; set; }
        public int? PokemonAbilityId { get; set; }
        public IReadOnlyList<int>? PokemonAttackIds { get; set; }
    }
}
