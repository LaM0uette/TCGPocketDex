@page "/TestView"
@using TCGPocketDex.SDK.Cards
@using TCGPocketDex.SDK.References
@using TCGPocketDex.Contracts.Cards
@using TCGPocketDex.Contracts.References
@inject ICardsClient CardsClient
@inject ITypesClient TypesClient
@inject IStagesClient StagesClient
@inject IAbilitiesClient AbilitiesClient
@inject IAttacksClient AttacksClient
@inject ICardExtensionsClient CardExtensionsClient
@inject IBoostersClient BoostersClient
@inject IRaritiesClient RaritiesClient
@inject IPromoSeriesClient PromoSeriesClient

<h3>TestView</h3>

@if (cardsDisplay is null)
{
    <p>Loading...</p>
}
else if (cardsDisplay.Count == 0)
{
    <p>No cards.</p>
}
else
{
    <ul>
        @foreach (var row in cardsDisplay.TakeLast(20).ToList())
        {
            <li>@row.Id - EN: @row.NameEn | FR: @row.NameFr | ImageUrl: @row.ImageUrl   <img src="@row.ImageUrl" alt="img" style="width:10px; height:auto; border:1px solid #ccc;" /></li>
        }
    </ul>
}

@code {
    private List<CardListRow> cardsDisplay = new();
    private sealed class CardListRow
    {
        public int Id { get; set; }
        public string? NameEn { get; set; }
        public string? NameFr { get; set; }
        public string ImageUrl { get; set; } = string.Empty;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        // Load cards for EN and FR to display both names and image URL
        var listEn = (await CardsClient.GetAllAsync("en")).ToList();
        var listFr = (await CardsClient.GetAllAsync("fr")).ToList();
        var dictEn = listEn.ToDictionary(x => x.Id, x => x);
        var dictFr = listFr.ToDictionary(x => x.Id, x => x);
        var allIds = dictEn.Keys.Union(dictFr.Keys).OrderBy(id => id);
        cardsDisplay = new List<CardListRow>();
        foreach (var id in allIds)
        {
            dictEn.TryGetValue(id, out var en);
            dictFr.TryGetValue(id, out var fr);
            cardsDisplay.Add(new CardListRow
            {
                Id = id,
                NameEn = en?.Name,
                NameFr = fr?.Name,
                ImageUrl = en?.ImageUrl ?? fr?.ImageUrl ?? string.Empty
            });
        }

        StateHasChanged();
    }
}